/**
 * Vanilla TypeScript Content Script
 * No React, no virtual DOM, just pure DOM manipulation
 */

interface VideoInfo {
  videoId: string;
  title: string;
  channel: string;
  url: string;
}

interface ThumbnailData {
  element: HTMLElement;
  videoInfo: VideoInfo | null;
  type: 'regular' | 'shorts' | 'live' | 'end-card' | 'metadata' | 'player';
}

class VanillaYouTubeSummarizer {
  private processed = new Set<HTMLElement>();
  private isProcessing = false;
  private debounceTimer: number | null = null;

  constructor() {
    console.log('[VanillaYouTubeSummarizer] Initializing vanilla content script...');
    this.init();
  }

  private init(): void {
    // Wait a bit for YouTube to load, then start processing
    setTimeout(() => {
      this.processPage();
      this.setupObservers();
    }, 2000);
  }

  private setupObservers(): void {
    // Very conservative mutation observer
    const observer = new MutationObserver((mutations) => {
      // Only process if we see significant DOM changes
      const hasSignificantChanges = mutations.some(mutation => 
        mutation.type === 'childList' && mutation.addedNodes.length > 0
      );

      if (hasSignificantChanges) {
        this.debounceProcessPage();
      }
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true,
      attributes: false, // Don't observe attribute changes
    });

    // Listen for YouTube navigation
    window.addEventListener('yt-navigate-finish', () => {
      console.log('[VanillaYouTubeSummarizer] Navigation detected');
      setTimeout(() => this.processPage(), 1000);
    });

    console.log('[VanillaYouTubeSummarizer] Observers set up');
  }

  private debounceProcessPage(): void {
    if (this.debounceTimer) {
      clearTimeout(this.debounceTimer);
    }

    this.debounceTimer = window.setTimeout(() => {
      this.processPage();
      this.debounceTimer = null;
    }, 1000); // 1 second debounce
  }

  private processPage(): void {
    if (this.isProcessing) return;
    this.isProcessing = true;

    try {
      console.log('[VanillaYouTubeSummarizer] Processing page...');
      
      const thumbnails = this.detectThumbnails();
      console.log(`[VanillaYouTubeSummarizer] Found ${thumbnails.length} thumbnails`);

      thumbnails.forEach(thumbnail => {
        if (!this.processed.has(thumbnail.element) && thumbnail.videoInfo) {
          this.injectButton(thumbnail);
          this.processed.add(thumbnail.element);
        }
      });

    } catch (error) {
      console.error('[VanillaYouTubeSummarizer] Error processing page:', error);
    } finally {
      this.isProcessing = false;
    }
  }

  private detectThumbnails(): ThumbnailData[] {
    const thumbnails: ThumbnailData[] = [];

    // Detect regular thumbnails
    const regularThumbnails = document.querySelectorAll('ytd-thumbnail');
    regularThumbnails.forEach((element) => {
      const videoInfo = this.extractVideoInfoFromRegular(element as HTMLElement);
      thumbnails.push({
        element: element as HTMLElement,
        videoInfo,
        type: this.getVideoType(element as HTMLElement),
      });
    });

    // Detect end card thumbnails
    const endCardThumbnails = document.querySelectorAll('.ytp-videowall-still');
    endCardThumbnails.forEach((element) => {
      const videoInfo = this.extractVideoInfoFromEndCard(element as HTMLElement);
      thumbnails.push({
        element: element as HTMLElement,
        videoInfo,
        type: 'end-card',
      });
    });

    return thumbnails.filter(t => t.videoInfo !== null);
  }

  private extractVideoInfoFromRegular(element: HTMLElement): VideoInfo | null {
    try {
      const container = element.closest('ytd-rich-grid-media, ytd-compact-video-renderer, ytd-video-renderer');
      if (!container) return null;

      // Extract title
      const titleElement = container.querySelector('#video-title');
      const title = titleElement?.textContent?.trim() || '';

      // Extract channel
      const channelElement = container.querySelector('.yt-formatted-string, #channel-name');
      const channel = channelElement?.textContent?.trim() || '';

      // Extract video ID
      const anchor = container.querySelector('a#thumbnail') as HTMLAnchorElement;
      if (!anchor) return null;

      const urlParams = new URLSearchParams(anchor.search || '');
      const videoId = urlParams.get('v') || '';

      if (!videoId) return null;

      return {
        videoId,
        title,
        channel,
        url: `https://www.youtube.com/watch?v=${videoId}`,
      };
    } catch (error) {
      console.error('[VanillaYouTubeSummarizer] Error extracting regular video info:', error);
      return null;
    }
  }

  private extractVideoInfoFromEndCard(element: HTMLElement): VideoInfo | null {
    try {
      const titleElement = element.querySelector('.ytp-videowall-still-info-title');
      const title = titleElement?.textContent?.trim() || '';

      const authorElement = element.querySelector('.ytp-videowall-still-info-author');
      const channel = authorElement?.textContent?.split('â€¢')[0]?.trim() || '';

      const href = element.getAttribute('href') || '';
      const videoIdMatch = href.match(/(?:\/watch\?v=|youtu\.be\/)([^&?]+)/);
      const videoId = videoIdMatch?.[1] || '';

      if (!videoId) return null;

      return {
        videoId,
        title,
        channel,
        url: `https://www.youtube.com/watch?v=${videoId}`,
      };
    } catch (error) {
      console.error('[VanillaYouTubeSummarizer] Error extracting end card video info:', error);
      return null;
    }
  }

  private getVideoType(element: HTMLElement): ThumbnailData['type'] {
    const container = element.closest('ytd-rich-grid-media, ytd-compact-video-renderer, ytd-video-renderer');
    if (!container) return 'regular';

    // Check for shorts
    if (container.querySelector('[href*="/shorts/"], [aria-label*="Shorts"]')) {
      return 'shorts';
    }

    // Check for live
    if (container.querySelector('[aria-label*="LIVE"], [aria-label*="Live"]')) {
      return 'live';
    }

    return 'regular';
  }

  private injectButton(thumbnail: ThumbnailData): void {
    try {
      const { element, videoInfo, type } = thumbnail;
      if (!videoInfo) return;

      // Check if button already exists
      if (element.querySelector('.vanilla-summarize-btn')) return;

      // Create button element
      const button = document.createElement('button');
      button.className = 'vanilla-summarize-btn';
      button.textContent = 'Summarize';
      button.style.cssText = this.getButtonStyles(type);

      // Add click handler
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        this.handleButtonClick(videoInfo);
      });

      // Create container
      const container = document.createElement('div');
      container.className = 'vanilla-summarize-container';
      container.style.cssText = this.getContainerStyles(type);
      container.appendChild(button);

      // Inject into thumbnail
      element.appendChild(container);

      console.log(`[VanillaYouTubeSummarizer] Injected button for: ${videoInfo.title}`);

    } catch (error) {
      console.error('[VanillaYouTubeSummarizer] Error injecting button:', error);
    }
  }

  private getButtonStyles(_type: ThumbnailData['type']): string {
    const baseStyles = `
      background: #ff0000;
      color: white;
      border: none;
      padding: 6px 12px;
      border-radius: 4px;
      font-size: 12px;
      font-weight: bold;
      cursor: pointer;
      z-index: 1000;
    `;

    return baseStyles;
  }

  private getContainerStyles(type: ThumbnailData['type']): string {
    switch (type) {
      case 'end-card':
        return `
          position: absolute;
          bottom: 0px;
          left: 0px;
          z-index: 1001;
        `;
      default:
        return `
          position: absolute;
          bottom: 8px;
          left: 8px;
          z-index: 1001;
        `;
    }
  }

  private handleButtonClick(videoInfo: VideoInfo): void {
    console.log('[VanillaYouTubeSummarizer] Button clicked for:', videoInfo);
    
    // For now, just show an alert - we can implement the actual summarization later
    alert(`Summarize: ${videoInfo.title}\nChannel: ${videoInfo.channel}\nVideo ID: ${videoInfo.videoId}`);
  }
}

// Initialize when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    new VanillaYouTubeSummarizer();
  });
} else {
  new VanillaYouTubeSummarizer();
}

export {}; // Make this a module
